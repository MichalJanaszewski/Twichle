@inject HttpClient HttpClient
@inject LocalStorageHandler LocalStorageHandler

@typeparam TStreamerDataType where TStreamerDataType : StreamerData


@if (!Game.AlreadyWon)
{
    <InputBar PassChosenStreamer="AddStreamer" StreamerProfile="@Game.StreamerProfiles.ToArray()" />
}

@if (_dataIsLoaded){
    <Table Streamers="@Game.ChosenStreamers" WinningStreamer="@_winningStreamer"
           DataSelectors="@DataSelectors" ComulnNames="@TableColumNnames">
        <LastColumn>
            @Content?.Invoke(((StreamerData, string))context)
        </LastColumn>
    </Table>
    
}

@if (Game.AlreadyWon)
{
    <h1>YOU WON</h1>
    <NexEvTimer></NexEvTimer>
}

@code {
    [Parameter]
    public Func<Streamer, object>[] DataSelectors { get; set; } = [];

    [Parameter]
    public Game<TStreamerDataType> Game { get; set; } = null!;

    [Parameter]
    public string StorageKey { get; set; } = "";

    [Parameter]
    public string[] TableColumNnames { get; set; } = [];
    
    [Parameter]
    public RenderFragment<(StreamerData streamerData, string color)>? Content { get; set; }
    
    

    private Streamer? _winningStreamer;

    private bool _alreadyWon = false;

    private bool _dataIsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (Game is null)
        {
            throw new InvalidOperationException("Game is null.");
        }

        await Game.LoadStreamersProfilesAsync();
        _winningStreamer = await Game.GetWinningStreamer();

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string progresValue = await LocalStorageHandler.GetValueAsync<string>(StorageKey);

            await Game.LoadLocStorageAsync(progresValue);

            _dataIsLoaded = true;
            StateHasChanged();
        }
    }


    private async Task AddStreamer(int id)
    {
        string? gameHistory = await Game.AddStreamer(id);
        if (gameHistory != null)
        {
            await LocalStorageHandler.SetValueAsync(StorageKey, gameHistory);
        }
        StateHasChanged();
    }
}