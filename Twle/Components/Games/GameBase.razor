@inject HttpClient HttpClient
@inject LocalStorageHandler LocalStorageHandler
@inject IJSRuntime JSRuntime

@typeparam TStreamerDataType where TStreamerDataType : StreamerData
<div class="container">
    @if (!Game.AlreadyWon)
    {
        <InputBar PassChosenStreamer="AddStreamer" StreamerProfile="@Game.StreamerProfiles.ToArray()"/>
    }

    @if (_dataIsLoaded){
        <Table Streamers="@Game.ChosenStreamers" WinningStreamer="@_winningStreamer" @ref="_animateLastRow" ShowLastColumn="@ShowLastColumn"
               DataSelectors="@DataSelectors" ColumnNames="@TableColumNnames" StreamersCount="@_streamersCount">
            <LastColumn>
                    @Content?.Invoke((StreamerData)context)
            </LastColumn>
            
        </Table>
        
    }

    @if (Game.AlreadyWon)
    {
        <h1>YOU WON</h1>
        <NexEvTimer></NexEvTimer>
    }
</div>
@code {
    [Parameter]
    public Func<Streamer, object>[] DataSelectors { get; set; } = [];

    [Parameter]
    public Game<TStreamerDataType> Game { get; set; } = null!;

    [Parameter]
    public string StorageKey { get; set; } = ""; 

    [Parameter]
    public string[] TableColumNnames { get; set; } = [];
    
    [Parameter]
    public RenderFragment<StreamerData>? Content { get; set; }
    
    [Parameter] 
    public bool ShowLastColumn { get; set; } = true;

    private Table _animateLastRow = null!;
    
    private Streamer? _winningStreamer;

    private bool _alreadyWon = false;

    private bool _dataIsLoaded = false;

    private int _streamersCount = 0;
    
    private async Task MakeAnimation()
    {
        await _animateLastRow.ResetAnimation();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Game is null)
        {
            throw new InvalidOperationException("Game is null.");
        }

        await Game.LoadStreamersProfilesAsync();
        _winningStreamer = await Game.GetWinningStreamer();

        Game.SetWinningFlag = SetWinningFlag;

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        if (await ResetLocalStorageAsync())
        {
            _dataIsLoaded = true;
            return;
        }
        
        await LoadStorageAsync();
        StateHasChanged();
    }

    private async Task<bool> ResetLocalStorageAsync()
    {
        string? resetFlag = await LocalStorageHandler.GetValueAsync<string>(RestFlagKey);
        
        if (resetFlag is null || resetFlag.Equals(DateTime.Today.ToString()))
        {
            return false;
        }

        await LocalStorageHandler.Clear();
            
        return true;
    }

    private async Task LoadStorageAsync()
    {
        string progresValue = await LocalStorageHandler.GetValueAsync<string>(StorageKey);

        _streamersCount += await Game.LoadLocStorageAsync(progresValue);

        _dataIsLoaded = true;
    }

    private async Task AddStreamer(int id)
    {
        string? gameHistory = await Game.AddStreamer(id);
        _streamersCount++;
        
        if (gameHistory != null)
        {
            await LocalStorageHandler.SetValueAsync(StorageKey, gameHistory);
        }
        StateHasChanged();

        await MakeAnimation();
    }

    private async Task SetWinningFlag()
    {
        await LocalStorageHandler.SetValueAsync(RestFlagKey, DateTime.Today.ToString());
    }

}