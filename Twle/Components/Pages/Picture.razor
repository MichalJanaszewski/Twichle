@page "/Picture"
@using System.Globalization

@rendermode InteractiveServer

<PageTitle>Twichle</PageTitle>

@if (_imageDataUrl != null)
{
    <div style="width: 400px; height: 400px; overflow: hidden;">
        <img id="image" src="@_imageDataUrl" style="width: @(_imgSize)px; height: @(_imgSize)px; object-fit: cover;" alt="Avater image"/>
    </div>
}

<GameBase Game="@_game" DataSelectors="@_dataSelectors" StorageKey="@_key" TableColumNnames="@_tableColumnNames">
    <Content>
    </Content>
</GameBase>


@code {
    private readonly Game<MainModeStreamerData> _game = new Game<MainModeStreamerData>(MainApiUrl + PictureModeAccesUrl);

    private readonly string _key = "/"+ PictureModeAccesUrl + DateTime.Now.Date.ToString(CultureInfo.InvariantCulture);

    private readonly string[] _tableColumnNames = {"Streamer"};

    private readonly Func<Streamer, object>[] _dataSelectors = new Func<Streamer, object>[]
    {
        streamer => streamer.Profile.Name
    };

    private string? _imageDataUrl;

    private double _imgSize = 1000; 

    protected override async void OnInitialized()
    {
        _game.OnStreamerListChanged += UpdateStreamerCount;
        _imageDataUrl = await GetStreamerImgAsync();
        StateHasChanged();
    }

    private async Task<string> GetStreamerImgAsync()
    {
        using var httpClient = new HttpClient();
        using HttpResponseMessage response = await httpClient.GetAsync($"{MainApiUrl}{PictureModeAccesUrl}/img");
        response.EnsureSuccessStatusCode();
        string data = await response.Content.ReadAsStringAsync();
               
        if (data == null)
        {
            throw new InvalidOperationException("Received null data from the server");
        }

        return data;
    }

    private void UpdateStreamerCount()
    {
        _imgSize = 1000 - 50 * _game.Size;
        StateHasChanged(); 
    }
}
